<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright 2006-2013 smartics, Kronseder & Reiner GmbH

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<properties>
		<title>Provider SPI</title>
	</properties>
	<body>
    <section name="Provider SPI">
      <p>
        The buildmetadata-plugin allows to add Provider implementations
        that add specific Build-Information the plugin does not provide
        by itself. For instance users may want to connect to a remote
        build number provider or aggregate information found in the
        project to flag certain conditions.
      </p>
      <p>
        Custom providers are guaranteed to be run at the end of the build
        meta data gathering. This allows those providers to access the
        information generated by the standard providers. This may be helpful
        if a provider implementation is used to export build information to
        a backend system.
      </p>

      <subsection name="Writing a custom Provider">
        <p>
          A custom provider should extend
          <a href="apidocs/de/smartics/maven/plugin/buildmetadata/data/AbstractMetaDataProvider.html">de.smartics.maven.plugin.buildmetadata.data.AbstractMetaDataProvider</a>
          and are required to implement
          <a href="apidocs/de/smartics/maven/plugin/buildmetadata/data/MetaDataProvider.html">de.smartics.maven.plugin.buildmetadata.data.MetaDataProvider</a>.
          The abstract class provides access to Maven's project, the settings, runtime and SCM information.
        </p>
        <p>
          The following class implements an example provider that only echos on the console.
        </p>
        <source><![CDATA[public class EchoProvider extends AbstractMetaDataProvider
{
  /**
   * The string to echo.
   */
  private String echo;

  /**
   * The number of times to echo the string.
   */
  private int times;

  /**
   * {@inheritDoc}
   *
   * @see de.smartics.maven.plugin.buildmetadata.data.MetaDataProvider#provideBuildMetaData(java.util.Properties)
   */
  public void provideBuildMetaData(final Properties buildMetaDataProperties)
    throws MojoExecutionException
  {
    if (times > 0)
    {
      for (int i = 0; i < times; i++)
      {
        System.out.println(echo);
      }
    }
  }
}]]></source>
      <p>
        Add the buildmetadata plugin artifact as a dependency.
      </p>
      <source><![CDATA[<dependencies>
  <dependency>
    <groupId>de.smartics.maven.plugin</groupId>
    <artifactId>buildmetadata-maven-plugin</artifactId>
    <version>${project.version}</version>
    <scope>provided</scope>
  </dependency>
</dependencies>]]></source>
      </subsection>

      <subsection name="Using a custom Provider">
        <p>
          Register the custom implementation in the <code>configuration</code>
          element of the plugin like this:
        </p>
        <source><![CDATA[      <plugin>
        <groupId>de.smartics.maven.plugin</groupId>
        <artifactId>buildmetadata-maven-plugin</artifactId>
        <configuration>
          <providers>
            <provider>
              <type>de.smartics.sandbox.provider.EchoProvider</type>
              <properties>
                <echo>Beautiful!</echo>
                <times>3</times>
              </properties>
            </provider>
          </providers>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>de.smartics.sandbox</groupId>
            <artifactId>sandbox-buildmetadata-provider</artifactId>
            <version>0.1.0</version>
          </dependency>
        </dependencies>
      </plugin>]]></source>
        <p>
          The example shows the echo provider that writes the
          echo string the given number of times to the console.
        </p>
        <p>
          The <code>type</code> attribute specifies the implementation to
          be instantiated. The properties are assigned as Strings or to
          the given type if it is convertable from a String to this type
          (like e.g. Integer values).
        </p>
      </subsection>
    </section>
  </body>
</document>