/*
 * Copyright 2006-2009 smartics, Kronseder & Reiner GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package de.smartics.maven.plugin.buildmetadata;

import java.io.File;
import java.util.Locale;
import java.util.ResourceBundle;

import org.apache.maven.doxia.sink.Sink;
import org.apache.maven.reporting.MavenReportException;

/**
 * Generates a report about the meta data provided to the build.
 * 
 * @goal buildmetadata-report
 * @phase site
 * @description Generates a report on the build meta data.
 * @requiresProject
 * @author <a href="mailto:robert.reiner@smartics.de">Robert Reiner</a>
 * @version $Revision$
 */
public class BuildReportMojo extends AbstractReportMojo
{
  // ********************************* Fields *********************************

  // --- constants ------------------------------------------------------------

  // --- members --------------------------------------------------------------

  /**
   * The reference to the properties file generated by the
   * {@link BuildMetaDataMojo}.
   */
  private File buildMetaDataPropertiesFile;

  // ****************************** Initializer *******************************

  // ****************************** Constructors ******************************

  // ****************************** Inner Classes *****************************

  // ********************************* Methods ********************************

  // --- init -----------------------------------------------------------------

  // --- get&set --------------------------------------------------------------

  /**
   * {@inheritDoc}
   * 
   * @see org.apache.maven.reporting.MavenReport#getName(java.util.Locale)
   */
  public String getName(final Locale locale)
  {
    return getBundle(locale).getString("report.name");
  }

  /**
   * {@inheritDoc}
   * 
   * @see org.apache.maven.reporting.MavenReport#getDescription(java.util.Locale)
   */
  public String getDescription(final Locale locale)
  {
    return getBundle(locale).getString("report.description");
  }

  /**
   * {@inheritDoc}
   * 
   * @see org.apache.maven.reporting.MavenReport#getOutputName()
   */
  public String getOutputName()
  {
    return "build-report";
  }

  // --- business -------------------------------------------------------------

  /**
   * {@inheritDoc}
   * 
   * @see org.apache.maven.reporting.AbstractMavenReport#executeReport(java.util.Locale)
   */
  @Override
  protected void executeReport(final Locale locale) throws MavenReportException
  {
    super.executeReport(locale);

    final Sink sink = getSink();
    final ResourceBundle messages = getBundle(locale);
    final BuildReportRenderer renderer =
        new BuildReportRenderer(messages, sink,
            this.buildMetaDataPropertiesFile);
    renderer.renderReport();
  }

  /**
   * {@inheritDoc}
   * <p>
   * Returns <code>false</code> if the properties file that contains the build
   * information cannot be read.
   * </p>
   * 
   * @see org.apache.maven.reporting.AbstractMavenReport#canGenerateReport()
   */
  @Override
  public boolean canGenerateReport()
  {
    this.buildMetaDataPropertiesFile = constructBuildMetaDataFile();
    return super.canGenerateReport()
        && this.buildMetaDataPropertiesFile.canRead();
  }

  /**
   * Constructs the path to the properties file containing the build meta data.
   * 
   * @return the file the build properties have been written to.
   */
  private File constructBuildMetaDataFile()
  {
    final File outputDirectoryName = project.getBasedir();
    final File outputDirectory = new File(outputDirectoryName, "/target");
    final File buildMetaDataFile =
        new File(outputDirectory, Constant.PROPERTY_FILE_DEFAULT_NAME);
    return buildMetaDataFile;
  }

  // --- object basics --------------------------------------------------------

}
